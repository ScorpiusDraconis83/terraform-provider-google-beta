// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This code is generated by Magic Modules using the following:
//
//     Configuration: https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/privilegedaccessmanager/Settings.yaml
//     Template:      https://github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.go.tmpl
//
//     DO NOT EDIT this file directly. Any changes made to this file will be
//     overwritten during the next generation cycle.
//
// ----------------------------------------------------------------------------

package privilegedaccessmanager

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"reflect"
	"regexp"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"

	"google.golang.org/api/googleapi"
)

var (
	_ = bytes.Clone
	_ = context.WithCancel
	_ = base64.NewDecoder
	_ = json.Marshal
	_ = fmt.Sprintf
	_ = log.Print
	_ = http.Get
	_ = reflect.ValueOf
	_ = regexp.Match
	_ = slices.Min([]int{1})
	_ = sort.IntSlice{}
	_ = strconv.Atoi
	_ = strings.Trim
	_ = time.Now
	_ = errwrap.Wrap
	_ = cty.BoolVal
	_ = diag.Diagnostic{}
	_ = customdiff.All
	_ = id.UniqueId
	_ = logging.LogLevel
	_ = retry.Retry
	_ = schema.Noop
	_ = validation.All
	_ = structure.ExpandJsonFromString
	_ = terraform.State{}
	_ = tpgresource.SetLabels
	_ = transport_tpg.Config{}
	_ = verify.ValidateEnum
	_ = googleapi.Error{}
)

func ResourcePrivilegedAccessManagerSettings() *schema.Resource {
	return &schema.Resource{
		Create: resourcePrivilegedAccessManagerSettingsCreate,
		Read:   resourcePrivilegedAccessManagerSettingsRead,
		Update: resourcePrivilegedAccessManagerSettingsUpdate,
		Delete: resourcePrivilegedAccessManagerSettingsDelete,

		Importer: &schema.ResourceImporter{
			State: resourcePrivilegedAccessManagerSettingsImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"location": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The region of the PAM settings resource.`,
			},
			"parent": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `Format: projects/{project-id|project-number} or organizations/{organization-number} or folders/{folder-number}`,
			},
			"email_notification_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `EmailNotificationSettings defines node-wide email notification preferences for various PAM events.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"custom_notification_behavior": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `CustomNotificationBehavior provides granular control over email notification delivery. Allows admins to selectively enable/disable notifications for specific events and specific personas.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"admin_notifications": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Email notifications specific to Requesters.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"grant_activated": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant activated. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_activation_failed": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant activation failed. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_ended": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant ended. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_externally_modified": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant externally modified. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
											},
										},
									},
									"approver_notifications": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Email notifications specific to Approvers.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"pending_approval": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for pending approval. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
											},
										},
									},
									"requester_notifications": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: `Email notifications specific to Requesters.`,
										MaxItems:    1,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"entitlement_assigned": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for entitlement assigned. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_activated": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant activated. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_activation_failed": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant activation failed. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_denied": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant denied. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_ended": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant ended. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_expired": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant expired. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_externally_modified": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant externally modified. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
												"grant_revoked": {
													Type:         schema.TypeString,
													Computed:     true,
													Optional:     true,
													ValidateFunc: verify.ValidateEnum([]string{"NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED", ""}),
													Description:  `Notification mode for grant revoked. Possible values: ["NOTIFICATION_MODE_UNSPECIFIED", "ENABLED", "DISABLED"]`,
												},
											},
										},
									},
								},
							},
							ExactlyOneOf: []string{"email_notification_settings.0.disable_all_notifications", "email_notification_settings.0.custom_notification_behavior"},
						},
						"disable_all_notifications": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: `This option indicates that all email notifications are disabled.`,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{},
							},
							ExactlyOneOf: []string{"email_notification_settings.0.disable_all_notifications", "email_notification_settings.0.custom_notification_behavior"},
						},
					},
				},
			},
			"service_account_approver_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `This controls the node-level settings for allowing service accounts as approvers.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: `Indicates whether service account is allowed to grant approvals.`,
						},
					},
				},
			},
			"create_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Create timestamp. Uses RFC 3339, where generated output will always be Z-normalized and use 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted.
Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".`,
			},
			"etag": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Fingerprint for optimistic concurrency returned in the response of GetSettings. Must be provided in the requests to UpdateSettings. If the value provided does not match the value known to the server, ABORTED will be thrown, and the client should retry the read-modify-write cycle.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Name of the settings resource. Possible formats:
projects/{project-id|project-number}/locations/{location}/settings folders/{folder-number}/locations/{location}/settings organizations/{organization-number}/locations/{location}/settings`,
			},
			"update_time": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `Update timestamp. Uses RFC 3339, where generated output will always be Z-normalized and use 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted.
Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z" or "2014-10-02T15:01:23+05:30".`,
			},
		},
		UseJSONNumber: true,
	}
}

func resourcePrivilegedAccessManagerSettingsCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return resourcePrivilegedAccessManagerSettingsUpdate(d, meta)
}

func resourcePrivilegedAccessManagerSettingsRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{PrivilegedAccessManagerBasePath}}{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return err
	}

	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Headers:   headers,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("PrivilegedAccessManagerSettings %q", d.Id()))
	}

	if err := d.Set("name", flattenPrivilegedAccessManagerSettingsName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("create_time", flattenPrivilegedAccessManagerSettingsCreateTime(res["createTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("update_time", flattenPrivilegedAccessManagerSettingsUpdateTime(res["updateTime"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("etag", flattenPrivilegedAccessManagerSettingsEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("service_account_approver_settings", flattenPrivilegedAccessManagerSettingsServiceAccountApproverSettings(res["serviceAccountApproverSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}
	if err := d.Set("email_notification_settings", flattenPrivilegedAccessManagerSettingsEmailNotificationSettings(res["emailNotificationSettings"], d, config)); err != nil {
		return fmt.Errorf("Error reading Settings: %s", err)
	}

	return nil
}

func resourcePrivilegedAccessManagerSettingsUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	serviceAccountApproverSettingsProp, err := expandPrivilegedAccessManagerSettingsServiceAccountApproverSettings(d.Get("service_account_approver_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("service_account_approver_settings"); ok || !reflect.DeepEqual(v, serviceAccountApproverSettingsProp) {
		obj["serviceAccountApproverSettings"] = serviceAccountApproverSettingsProp
	}
	emailNotificationSettingsProp, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettings(d.Get("email_notification_settings"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("email_notification_settings"); ok || !reflect.DeepEqual(v, emailNotificationSettingsProp) {
		obj["emailNotificationSettings"] = emailNotificationSettingsProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{PrivilegedAccessManagerBasePath}}{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Settings %q: %#v", d.Id(), obj)
	headers := make(http.Header)
	updateMask := []string{}

	if d.HasChange("service_account_approver_settings") {
		updateMask = append(updateMask, "serviceAccountApproverSettings")
	}

	if d.HasChange("email_notification_settings") {
		updateMask = append(updateMask, "emailNotificationSettings")
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	baseUrlForEtag, err := tpgresource.ReplaceVars(d, config, "{{PrivilegedAccessManagerBasePath}}{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return err
	}
	resFull, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		RawURL:    baseUrlForEtag,
		UserAgent: userAgent,
	})
	if err != nil {
		return fmt.Errorf("Error fetching etag for Settings: %s", err)
	}
	if etag, ok := resFull["etag"]; ok {
		obj["etag"] = etag
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating Settings %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating Settings %q: %#v", d.Id(), res)
		}

		err = PrivilegedAccessManagerOperationWaitTime(
			config, res, "Updating Settings", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}

	return resourcePrivilegedAccessManagerSettingsRead(d, meta)
}

func resourcePrivilegedAccessManagerSettingsDelete(d *schema.ResourceData, meta interface{}) error {
	log.Printf("[WARNING] PrivilegedAccessManager Settings resources"+
		" cannot be deleted from Google Cloud. The resource %s will be removed from Terraform"+
		" state, but will still be present on Google Cloud.", d.Id())
	d.SetId("")

	return nil
}

func resourcePrivilegedAccessManagerSettingsImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^(?P<parent>.+)/locations/(?P<location>[^/]+)/settings$",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "{{parent}}/locations/{{location}}/settings")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenPrivilegedAccessManagerSettingsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsServiceAccountApproverSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["disable_all_notifications"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(original["disableAllNotifications"], d, config)
	transformed["custom_notification_behavior"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(original["customNotificationBehavior"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["requester_notifications"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(original["requesterNotifications"], d, config)
	transformed["admin_notifications"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(original["adminNotifications"], d, config)
	transformed["approver_notifications"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(original["approverNotifications"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["entitlement_assigned"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(original["entitlementAssigned"], d, config)
	transformed["grant_activated"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(original["grantActivated"], d, config)
	transformed["grant_denied"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(original["grantDenied"], d, config)
	transformed["grant_expired"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(original["grantExpired"], d, config)
	transformed["grant_ended"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(original["grantEnded"], d, config)
	transformed["grant_revoked"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(original["grantRevoked"], d, config)
	transformed["grant_externally_modified"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(original["grantExternallyModified"], d, config)
	transformed["grant_activation_failed"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(original["grantActivationFailed"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["grant_activated"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(original["grantActivated"], d, config)
	transformed["grant_ended"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(original["grantEnded"], d, config)
	transformed["grant_externally_modified"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(original["grantExternallyModified"], d, config)
	transformed["grant_activation_failed"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(original["grantActivationFailed"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["pending_approval"] =
		flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(original["pendingApproval"], d, config)
	return []interface{}{transformed}
}
func flattenPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandPrivilegedAccessManagerSettingsServiceAccountApproverSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsServiceAccountApproverSettingsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettings(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisableAllNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(original["disable_all_notifications"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["disableAllNotifications"] = transformedDisableAllNotifications
	}

	transformedCustomNotificationBehavior, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(original["custom_notification_behavior"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCustomNotificationBehavior); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["customNotificationBehavior"] = transformedCustomNotificationBehavior
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsDisableAllNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	transformed := make(map[string]interface{})

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehavior(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRequesterNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(original["requester_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequesterNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["requesterNotifications"] = transformedRequesterNotifications
	}

	transformedAdminNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(original["admin_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminNotifications"] = transformedAdminNotifications
	}

	transformedApproverNotifications, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(original["approver_notifications"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedApproverNotifications); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["approverNotifications"] = transformedApproverNotifications
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEntitlementAssigned, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(original["entitlement_assigned"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntitlementAssigned); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entitlementAssigned"] = transformedEntitlementAssigned
	}

	transformedGrantActivated, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(original["grant_activated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivated"] = transformedGrantActivated
	}

	transformedGrantDenied, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(original["grant_denied"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantDenied); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantDenied"] = transformedGrantDenied
	}

	transformedGrantExpired, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(original["grant_expired"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExpired); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExpired"] = transformedGrantExpired
	}

	transformedGrantEnded, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(original["grant_ended"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantEnded); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantEnded"] = transformedGrantEnded
	}

	transformedGrantRevoked, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(original["grant_revoked"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantRevoked); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantRevoked"] = transformedGrantRevoked
	}

	transformedGrantExternallyModified, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(original["grant_externally_modified"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExternallyModified); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExternallyModified"] = transformedGrantExternallyModified
	}

	transformedGrantActivationFailed, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(original["grant_activation_failed"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivationFailed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivationFailed"] = transformedGrantActivationFailed
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsEntitlementAssigned(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantDenied(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExpired(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantEnded(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantRevoked(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantExternallyModified(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorRequesterNotificationsGrantActivationFailed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGrantActivated, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(original["grant_activated"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivated); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivated"] = transformedGrantActivated
	}

	transformedGrantEnded, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(original["grant_ended"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantEnded); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantEnded"] = transformedGrantEnded
	}

	transformedGrantExternallyModified, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(original["grant_externally_modified"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantExternallyModified); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantExternallyModified"] = transformedGrantExternallyModified
	}

	transformedGrantActivationFailed, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(original["grant_activation_failed"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGrantActivationFailed); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["grantActivationFailed"] = transformedGrantActivationFailed
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivated(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantEnded(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantExternallyModified(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorAdminNotificationsGrantActivationFailed(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotifications(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPendingApproval, err := expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(original["pending_approval"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPendingApproval); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pendingApproval"] = transformedPendingApproval
	}

	return transformed, nil
}

func expandPrivilegedAccessManagerSettingsEmailNotificationSettingsCustomNotificationBehaviorApproverNotificationsPendingApproval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
